/*
 * Copyright (C) Qatar Insurance Group, PO Box 666, Doha, Qatar
 * All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited.
 */
package qa.com.qic.crm.restapi.resources.dao;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.dbutils.CustomQueryRunner;
import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryExecutor;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.AutoGeneratedKeyHandler;
import org.apache.commons.dbutils.handlers.ScalarHandler;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.Logger;
import qa.com.qic.common.db.DatabaseDAO;
import qa.com.qic.common.util.ApplicationConstants;
import qa.com.qic.common.vo.MWhatsappAutoMessage;
import qa.com.qic.common.vo.TWhatsappLog;
import qa.com.qic.crm.restapi.model.wa.EngatiMessage;
import qa.com.qic.crm.restapi.resources.services.WhatsAppService;
import qa.com.qic.utility.helpers.LogUtil;

/**
 *
 * @author ravindar.singh
 */
public class WhatsAppDAO extends DatabaseDAO {

    private static final Logger logger = LogUtil.getLogger(WhatsAppDAO.class);

    private Connection con = null;
    private final String dataSource;

    public WhatsAppDAO(String dataSource) {
        this.dataSource = dataSource;
    }

    public String getDataSource() {
        return dataSource;
    }

    public void processIncomingMessage(List<TWhatsappLog> logs) {
        try {
            String query = null;
            con = getDBConnection(getDataSource());
            QueryRunner run = new QueryRunner();
            int rec_cnt = 0;
            int result_ins[] = null;

            boolean isReport = false;
            List<Object[]> list_seen = new LinkedList<>();
            List<Object[]> list_dvly = new LinkedList<>();
            List<Object[]> list_error = new LinkedList<>();
            for (TWhatsappLog log : logs) {
                if ("Y".equals(log.getWlReadYn())) {
                    isReport = true;
                    Object[] p = new Object[]{log.getWlReadYn(), new Timestamp(log.getWlReadDt().getTime()), log.getWlMsgId(), log.getWlMobileNo()};
                    list_seen.add(p);
                }
                if ("Y".equals(log.getWlDeliverdYn())) {
                    isReport = true;
                    Object[] p = new Object[]{log.getWlDeliverdYn(), new Timestamp(log.getWlDeliverdDt().getTime()), log.getWlMsgId(), log.getWlMobileNo()};
                    list_dvly.add(p);
                }
                if (StringUtils.isNotBlank(log.getWlErrorId())) {
                    list_error.add(new Object[]{log.getWlErrorId(), log.getWlErrorMsg(), log.getWlMsgId(), log.getWlMobileNo()});
                }
                if (StringUtils.isNotBlank(log.getWlFlex02())) {
                    Long wlLogId = findLogId(log);
                    log.setWlParentLogId(wlLogId);
                }
            }
            if (isReport) {
                if (!list_seen.isEmpty()) {
                    Object[][] params_seen = new Object[list_seen.size()][];
                    int i = 0;
                    for (Object[] o : list_seen) {
                        params_seen[i++] = o;
                    }
                    query = "UPDATE T_WHATSAPP_LOG SET WL_READ_YN = ?, WL_READ_DT = ? WHERE WL_MSG_ID = ? AND WL_MOBILE_NO = ?";
                    result_ins = run.batch(con, query, params_seen);
                    logger.debug("Message seen report updated for {}. Status: {}", new Object[]{Arrays.deepToString(params_seen), Arrays.toString(result_ins)});
                }
                if (!list_dvly.isEmpty()) {
                    Object[][] params_dvly = new Object[list_dvly.size()][];
                    int i = 0;
                    for (Object[] o : list_dvly) {
                        params_dvly[i++] = o;
                    }
                    query = "UPDATE T_WHATSAPP_LOG SET WL_DELIVERD_YN = ?, WL_DELIVERD_DT = ? WHERE WL_MSG_ID = ? AND WL_MOBILE_NO = ?";
                    result_ins = run.batch(con, query, params_dvly);
                    logger.debug("Message deliverd report updated for {}. Status: {}", new Object[]{Arrays.deepToString(params_dvly), Arrays.toString(result_ins)});
                }
                if (!list_error.isEmpty()) {
                    Object[][] params_error = new Object[list_error.size()][];
                    int i = 0;
                    for (Object[] o : list_error) {
                        params_error[i++] = o;
                    }
                    query = "UPDATE T_WHATSAPP_LOG SET WL_ERROR_ID = ?, WL_ERROR_MSG = ? WHERE WL_MSG_ID = ? AND WL_MOBILE_NO = ?";
                    result_ins = run.batch(con, query, params_error);
                    logger.debug("Message error report updated for {}. Status: {}", new Object[]{Arrays.deepToString(params_error), Arrays.toString(result_ins)});
                }
                return;
            }

            result_ins = insertLog(logs, run);
            logger.debug("Inserted data in log. Status: {}", new Object[]{Arrays.toString(result_ins)});
            for (TWhatsappLog log : logs) {
                insertTxn(log, run);
                // Sending auto response
                //commented for corporate
                //MWhatsappAutoMessage am = loadAutoResponse(log.getWlCrmId());
                MWhatsappAutoMessage am = loadAutoResponse();
                if (am != null) {
                    TWhatsappLog am_log = new TWhatsappLog();
                    //commented for corporate
                    //am_log.setWlCrmId(log.getWlCrmId());
                    am_log.setWlMobileNo(log.getWlMobileNo());
                    am_log.setWlFlex01(String.valueOf(am.getWamId()));
                    boolean isSent = validateAutoResponseSent(am_log);
                    if (!isSent) {
                        logger.debug("Sending auto message to {}. Message Id: {}", new Object[]{log.getWlMobileNo(), am.getWamId()});
                        WhatsAppService service = new WhatsAppService(getDataSource());
                        am_log.setWlMsgMode("O");
                        if (StringUtils.isNotBlank(am.getWamMessageImg())) {
                            am_log.setWlMsgType("I");
                            //Base path https://www.qic-insured.com/crm/wa/docs/{path} refering /qlmdocs/WhatsApp_Docs (Production)
                            am_log.setWlMsgUrl(am.getWamMessageImg());
                            am_log.setWlFilePath(am.getWamMessageImg());
                        } else {
                            am_log.setWlMsgType("T");
                        }
                        am_log.setWlText(am.getWamMessage());
                        Long logId = service.sendMessage(am_log);
                        if (logId != null) {
                            logger.info("Successfully sent auto message to {}. Message Id: {}, Log Id: {}", new Object[]{log.getWlMobileNo(), am.getWamId(), logId});
                        }
                    }
                }
            }
        } catch (Exception e) {
            logger.error("", e);
        } finally {
            DbUtils.closeQuietly(con);
        }
    }

    private int[] insertLog(List<TWhatsappLog> logs, QueryRunner run) throws SQLException {
        String query = "INSERT INTO T_WHATSAPP_LOG "
                + "(WL_LOG_ID, WL_PARENT_LOG_ID, WL_LOG_DATE, WL_MOBILE_NO, WL_MSG_MODE, "
                + "WL_MSG_TYPE, WL_TEXT, WL_MSG_URL, WL_FILE_PATH, WL_ERROR_ID, "
                + "WL_ERROR_MSG, WL_CR_UID, WL_MSG_ID, WL_FLEX_01, WL_FLEX_02) "
                + "VALUES (S_WL_LOG_ID.NEXTVAL, ?, ?, ?, ?, "
                + "?, ?, ?, ?, ?, "
                + "?, ?, ?, ?, ?)";
        int rows = logs.size();
        Object[][] params = new Object[rows][14];
        int i = 0, j;
        int[] paramDataType = new int[]{Types.VARCHAR, Types.VARCHAR};
        for (TWhatsappLog log : logs) {
            j = 0;
            params[i][j++] = null == log.getWlParentLogId() ? "" : log.getWlParentLogId();
            params[i][j++] = new Timestamp(log.getWlLogDate().getTime());
            params[i][j++] = log.getWlMobileNo();
            params[i][j++] = log.getWlMsgMode();
            params[i][j++] = log.getWlMsgType();
            params[i][j++] = log.getWlText();
            params[i][j++] = log.getWlMsgUrl();
            params[i][j++] = log.getWlFilePath();
            params[i][j++] = log.getWlErrorId();
            params[i][j++] = log.getWlErrorMsg();
            params[i][j++] = log.getWlCrUid();
            params[i][j++] = log.getWlMsgId();
            params[i][j++] = log.getWlFlex01();
            params[i][j++] = log.getWlFlex02();
            ++i;
        }
        return run.batch(con, query, params);
    }

    public void insertTxn(TWhatsappLog log) {
        try {
            con = getDBConnection(getDataSource());
            QueryRunner run = new QueryRunner();
            insertTxn(log, run);
        } catch (Exception e) {
            logger.error("", e);
        } finally {
            DbUtils.closeQuietly(con);
        }
    }
    
    /*private void updateUserKey(EngatiMessage engatiModel, QueryRunner run) {
        String mobNum = engatiModel.getBody().getAttributeMap().get("user.phone_no");
        try {
            int rec_cnt = 0;
            String query = "UPDATE M_WHATSAPP_CONTACTS SET WC_USER_KEY = ?, WC_UPD_DT = SYSDATE WHERE WC_MOBILE_NO = ?";
            Object[] param = new Object[]{engatiModel.getUserId(), mobNum};
            rec_cnt = run.update(con, query, param);
            logger.info("Update USER_KEY_ID for. Mobile No: {}, UserKeyID: {}, rec_cnt{}", new Object[]{mobNum, engatiModel.getUserId(), rec_cnt});
        } catch (Exception e) {
            logger.error("", e);
        }
    }*/

    private void insertTxn(TWhatsappLog log, QueryRunner run) throws SQLException {
        int rec_cnt = 0;
        //commented for corporate
        //String query = "SELECT COUNT(WT_TXN_ID) FROM T_WHATSAPP_TXN WHERE WT_CRM_ID = ? AND WT_MOBILE_NO = ?";
        String query = "SELECT COUNT(WT_TXN_ID) FROM T_WHATSAPP_TXN WHERE WT_MOBILE_NO = ?";
        ResultSetHandler<BigDecimal> sh = new ScalarHandler<>(1);
        //commented for corporate
        //BigDecimal result_cnt = run.query(con, query, sh, log.getWlCrmId(), log.getWlMobileNo());
        //logger.debug("Checking {} exists in transaction. CRM ID: {}, Status: {}", new Object[]{log.getWlMobileNo(), log.getWlCrmId(), result_cnt});
        BigDecimal result_cnt = run.query(con, query, sh, log.getWlMobileNo());
        logger.debug("Checking {} exists in transaction. Status: {}", new Object[]{log.getWlMobileNo(), result_cnt});
        if (result_cnt == null || result_cnt.intValue() == 0) {
            //commented for corporate
            //String mobCountryCode = ApplicationConstants.getMobileCountryCode(log.getWlCrmId());
            //query = "SELECT INF_NAME FROM M_INSURED_INFO WHERE '" + mobCountryCode + "'||INF_MOBILE_NO = ? OR '" + mobCountryCode + "'||INF_MOBILE_NO_1 = ? OR '" + mobCountryCode + "'||INF_MOBILE_NO_2 = ? AND INSTR(INF_CRM_ID, ?) > 0 OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY";
            query = "SELECT WC_NAME FROM M_WHATSAPP_CONTACTS WHERE WC_MOBILE_NO = ?";
            ResultSetHandler<String> rsh = new ScalarHandler<>(1);
            String name = run.query(con, query, rsh, log.getWlMobileNo());
            //commented for corporate
            //logger.debug("Checking name in insured contacts. Mobile: {}, CRM ID: {}, Name: {}", new Object[]{log.getWlMobileNo(), log.getWlCrmId(), name});
            logger.debug("Checking name in contacts. Mobile: {}, Name: {}", new Object[]{log.getWlMobileNo(), name});
            if (StringUtils.isBlank(name)) {
                //commented for corporate
                /*query = "INSERT INTO M_WHATSAPP_CONTACTS(WC_MOBILE_NO, WC_NAME, WC_CRM_ID, WC_FRZ_YN, WC_CR_UID, WC_CR_DT) VALUES (?, ?, ?, '0', 'admin', SYSDATE)";
                rec_cnt = run.update(con, query, new Object[]{log.getWlMobileNo(), name, log.getWlCrmId()});
                logger.debug("Inserting name in contacts. Mobile: {}, Name: {}, CRM ID: {}, Ststus: {}", new Object[]{log.getWlMobileNo(), name, log.getWlCrmId(), rec_cnt});*/

                query = "SELECT INF_NAME FROM M_INSURED_INFO WHERE '974'||INF_MOBILE_NO = ? OR '974'||INF_MOBILE_NO_1 = ? OR '974'||INF_MOBILE_NO_2 = ? OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY";
                name = run.query(con, query, rsh, log.getWlMobileNo(), log.getWlMobileNo(), log.getWlMobileNo());
                logger.debug("Checking name in insured contacts. Mobile: {}, Name: {}", new Object[]{log.getWlMobileNo(), name});
                if (StringUtils.isNotBlank(name)) {

                    //commented for corporate
                    /*query = "INSERT INTO M_WHATSAPP_CONTACTS(WC_MOBILE_NO, WC_NAME, WC_CRM_ID, WC_FRZ_YN, WC_CR_UID, WC_CR_DT) VALUES (?, ?, ?, '0', 'admin', SYSDATE)";
                    rec_cnt = run.update(con, query, new Object[]{log.getWlMobileNo(), name, log.getWlCrmId()});
                    logger.debug("Inserting name in contacts. Mobile: {}, Name: {}, CRM ID: {}, Ststus: {}", new Object[]{log.getWlMobileNo(), name, log.getWlCrmId(), rec_cnt});*/
                    query = "INSERT INTO M_WHATSAPP_CONTACTS(WC_MOBILE_NO, WC_NAME, WC_FRZ_YN, WC_CR_UID, WC_CR_DT) VALUES (?, ?, '0', 'admin', SYSDATE)";
                    rec_cnt = run.update(con, query, new Object[]{log.getWlMobileNo(), name});
                    logger.debug("Inserting name in contacts. Mobile: {}, Name: {}, Ststus: {}", new Object[]{log.getWlMobileNo(), name, rec_cnt});
                }
            }
            //commented for corporate
            /*query = "INSERT INTO T_WHATSAPP_TXN "
                    + "(WT_TXN_ID, WT_MOBILE_NO, WT_NAME, WT_CRM_ID, WT_DATE, WT_MSG_COUNT, "
                    + "WT_FLEX_01, WT_FLEX_02) VALUES (S_WT_TXN_ID.NEXTVAL, ?, ?, ?, SYSDATE, 1, ?, ?)";
            rec_cnt = run.update(con, query, log.getWlMobileNo(), name, log.getWlCrmId(), null, null);
            logger.debug("Message inserted in transaction for {}. CRM ID: {}, Status: {}", new Object[]{log.getWlMobileNo(), log.getWlCrmId(), rec_cnt});*/

            query = "INSERT INTO T_WHATSAPP_TXN "
                    + "(WT_TXN_ID, WT_MOBILE_NO, WT_NAME, WT_DATE, WT_MSG_COUNT, "
                    + "WT_FLEX_01, WT_FLEX_02) VALUES (S_WT_TXN_ID.NEXTVAL, ?, ?, SYSDATE, 1, ?, ?)";
            rec_cnt = run.update(con, query, log.getWlMobileNo(), name, "1", null);
            logger.debug("Message inserted in transaction for {}. Status: {}", new Object[]{log.getWlMobileNo(), rec_cnt});
        } else {

            //commented for corporate
            /*query = "UPDATE T_WHATSAPP_TXN SET WT_MSG_COUNT = NVL(WT_MSG_COUNT, 0) + 1, WT_UPD_DT = SYSDATE WHERE WT_MOBILE_NO = ? AND WT_CRM_ID = ?";
            rec_cnt = run.update(con, query, log.getWlMobileNo(), log.getWlCrmId());
            logger.debug("Message count updated in transaction for {}. CRM ID: {}, Status: {}", new Object[]{log.getWlMobileNo(), log.getWlCrmId(), rec_cnt});*/
            query = "UPDATE T_WHATSAPP_TXN SET WT_MSG_COUNT = NVL(WT_MSG_COUNT, 0) + 1, WT_UPD_DT = SYSDATE, WT_FLEX_01 = NVL(WT_FLEX_01, 0) + 1 WHERE WT_MOBILE_NO = ?";
            rec_cnt = run.update(con, query, log.getWlMobileNo());
            logger.debug("Message count updated in transaction for {}. Status: {}", new Object[]{log.getWlMobileNo(), rec_cnt});
        }
    }

    public Long processOutgoingMessage(TWhatsappLog log) {
        Long logId = null;
        try {
            String query = "INSERT INTO T_WHATSAPP_LOG "
                    //commented for corporate
                    //+ "(WL_LOG_ID, WL_CRM_ID, WL_LOG_DATE, WL_MOBILE_NO, WL_MSG_MODE, WL_MSG_TYPE, "
                    + "(WL_LOG_ID, WL_LOG_DATE, WL_MOBILE_NO, WL_MSG_MODE, WL_MSG_TYPE, "
                    + "WL_TEXT, WL_MSG_URL, WL_FILE_PATH, WL_CR_UID, WL_FLEX_01, WL_FLEX_02, WL_TEMPLATE_ID) VALUES "
                    //commented for corporate
                    //+ "(S_WL_LOG_ID.NEXTVAL, ?, SYSDATE, ?, ?, ?, "
                    + "(S_WL_LOG_ID.NEXTVAL, SYSDATE, ?, ?, ?, "
                    + "?, ?, ?, ?, ?, ?, ?)";
            logger.debug("Inserting in log. Mobile: {}, Type: {}, Text: {}, User Id: {}", new Object[]{log.getWlMobileNo(), log.getWlMsgType(), log.getWlText(), log.getWlCrUid(), log.getWlTemplateId()});
            Object[] param = new Object[10];
            int j = 0;
            //commented for corporate
            //param[j++] = log.getWlCrmId();
            param[j++] = log.getWlMobileNo();
            param[j++] = "O";
            param[j++] = "T";
            param[j++] = log.getWlText();
            param[j++] = log.getWlMsgUrl();
            param[j++] = log.getWlFilePath();
            param[j++] = log.getWlCrUid();
            param[j++] = log.getWlFlex01();
            param[j++] = log.getWlFlex02();
            param[j++] = log.getWlTemplateId();
            ResultSetHandler<BigDecimal> rsh = new AutoGeneratedKeyHandler<>();
            QueryRunner run = new CustomQueryRunner(true);

            BigDecimal bd = run.insert(con, query, rsh, param);
            if (bd != null) {
                logId = bd.longValue();
                logger.info("Record inserted sucessfully. Id: {}", new Object[]{logId});
            }
        } catch (Exception e) {
            logger.error("", e);
        }
        return logId;
    }
    
    public void updateOutgoingMessageStatusByUserId(TWhatsappLog log) {
        try {
            String query = "SELECT WL_LOG_ID wlLogId, WL_MSG_ID wlMsgId FROM T_WHATSAPP_LOG WHERE WL_MSG_MODE = 'O' AND WL_LOG_DATE >= (SYSDATE - INTERVAL '2' MINUTE) AND WL_ERROR_ID IS NULL AND WL_MOBILE_NO = ? ORDER BY WL_LOG_DATE DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY";
            Object[] param = new Object[]{log.getWlMobileNo()};
            logger.debug("Getting recent message. Mobile No.: {}", param);
            TWhatsappLog l = (TWhatsappLog) executeQuery(con, query, param, TWhatsappLog.class);
            if(null != l) {
                log.setWlLogId(l.getWlLogId());
                log.setWlMsgId(l.getWlMsgId());
                logger.info("Found recent message. Id: {}, Mobile No.: {}", new Object[]{log.getWlLogId(), log.getWlMobileNo()});
                updateOutgoingMessageStatus(log);
            } else {
                logger.error("No recent message found. Mobile No.: {}", new Object[]{log.getWlMobileNo()});
            }
        } catch (Exception e) {
            logger.error("", e);
        }
    }

    public void updateOutgoingMessageStatus(TWhatsappLog log) {
        try {
            QueryRunner run = new QueryRunner();
            int rec_cnt = 0;
            String query = "UPDATE T_WHATSAPP_LOG SET WL_MSG_ID = ?, WL_ERROR_ID = ?, WL_ERROR_MSG = ? WHERE WL_LOG_ID = ?";
            Object[] param = new Object[]{log.getWlMsgId(), log.getWlErrorId(), log.getWlErrorMsg(), log.getWlLogId()};
            logger.debug("Updating message sent status in log. Msg Id: {}, Error Id: {}, Error: {}, Id: {}", param);
            rec_cnt = run.update(con, query, param);
            logger.info("Updated message sent status in log. Id: {}, Status: {}", new Object[]{log.getWlLogId(), rec_cnt});
        } catch (Exception e) {
            logger.error("", e);
        }
    }

    private MWhatsappAutoMessage loadAutoResponse() {
        //commented for corporate
        //public MWhatsappAutoMessage loadAutoResponse(final String crmId) {
        MWhatsappAutoMessage autoMessage = null;
        try {
            String query = null;
            query = "SELECT WAM_ID wamId, WAM_MESSAGE wamMessage, WAM_MESSAGE_IMG wamMessageImg FROM M_WHATSAPP_AUTO_MESSAGE WHERE "
                    + "SYSDATE BETWEEN NVL(WAM_EFF_FROM_DATE, SYSDATE) AND NVL(WAM_EFF_TO_DATE, SYSDATE) AND "
                    + "(WAM_REPEAT_YN = 'N' OR (WAM_REPEAT_YN = 'Y' AND SYSDATE BETWEEN TO_DATE(TO_CHAR(SYSDATE, 'DD/MM/RRRR') || WAM_FROM_TIME, 'DD/MM/RRRR HH24:MI') - WAM_FM_TIME_ON AND TO_DATE(TO_CHAR(SYSDATE, 'DD/MM/RRRR') || WAM_TO_TIME, 'DD/MM/RRRR HH24:MI') + WAM_TO_TIME_ON AND "
                    + "((TO_CHAR(SYSDATE, 'D') = 1 AND WAM_DAY1_YN = 'Y') "
                    + "OR (TO_CHAR(SYSDATE, 'D') = 2 AND WAM_DAY2_YN = 'Y') "
                    + "OR (TO_CHAR(SYSDATE, 'D') = 3 AND WAM_DAY3_YN = 'Y') "
                    + "OR (TO_CHAR(SYSDATE, 'D') = 4 AND WAM_DAY4_YN = 'Y') "
                    + "OR (TO_CHAR(SYSDATE, 'D') = 5 AND WAM_DAY5_YN = 'Y') "
                    + "OR (TO_CHAR(SYSDATE, 'D') = 6 AND WAM_DAY6_YN = 'Y') "
                    + "OR (TO_CHAR(SYSDATE, 'D') = 7 AND WAM_DAY7_YN = 'Y')))) "
                    //commented for corporate
                    // + "AND WAM_CRM_ID = ? "
                    + "ORDER BY WAM_SR_NO OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY";
            //commented for corporate
            // autoMessage = (MWhatsappAutoMessage) executeQuery(con, query, new Object[]{crmId}, MWhatsappAutoMessage.class);
            autoMessage = (MWhatsappAutoMessage) executeQuery(con, query, new Object[]{}, MWhatsappAutoMessage.class);
            if (autoMessage != null) {
                //commented for corporate
                //logger.info("Retrieved auto response. Crm ID: {}, Id: {}, Message: {}", new Object[]{crmId, autoMessage.getWamId(), autoMessage.getWamMessage()});
                logger.info("Retrieved auto response. Id: {}, Message: {}", new Object[]{autoMessage.getWamId(), autoMessage.getWamMessage()});
            }
        } catch (Exception e) {
            logger.error("", e);
        } finally {
        }
        return autoMessage;
    }

    private boolean validateAutoResponseSent(TWhatsappLog log) {
        boolean isSent = true;
        try {
            QueryRunner run = new QueryRunner();
            //commented for corporate
            //String query = "SELECT COUNT(WL_LOG_ID) FROM T_WHATSAPP_LOG WHERE WL_FLEX_01 = ? AND TRUNC(SYSDATE) = TRUNC(WL_LOG_DATE) AND WL_CRM_ID = ? AND WL_MOBILE_NO = ?";
            //Object[] param = new Object[]{log.getWlFlex01(), log.getWlCrmId(), log.getWlMobileNo()};
            String query = "SELECT COUNT(WL_LOG_ID) FROM T_WHATSAPP_LOG WHERE WL_FLEX_01 = ? AND TRUNC(SYSDATE) = TRUNC(WL_LOG_DATE) AND WL_MOBILE_NO = ?";
            Object[] param = new Object[]{log.getWlFlex01(), log.getWlMobileNo()};
            ResultSetHandler<BigDecimal> sh = new ScalarHandler<>(1);
            BigDecimal result_cnt = run.query(con, query, sh, param);
            if (result_cnt != null && result_cnt.intValue() == 0) {
                isSent = false;
            } else {
                logger.info("Auto Message already sent to {}. Message ID: {}", new Object[]{log.getWlMobileNo(), log.getWlFlex01()});
            }
        } catch (Exception e) {
            logger.error("", e);
        } finally {
        }
        return isSent;
    }

    private Long findLogId(final TWhatsappLog log) {
        Long wlLogId = null;
        try {
            QueryRunner run = new QueryRunner();
            String query = "SELECT WL_LOG_ID FROM T_WHATSAPP_LOG WHERE WL_MSG_ID = ? AND WL_LOG_DATE >= SYSDATE - 90 AND WL_MOBILE_NO = ?";
            Object[] param = new Object[]{log.getWlFlex02(), log.getWlMobileNo()};
            ResultSetHandler<BigDecimal> sh = new ScalarHandler<>(1);
            BigDecimal result = run.query(con, query, sh, param);
            if (result != null) {
                wlLogId = result.longValue();
            } else {
                logger.warn("Reply message not found. Mobile: {}, Message Id: {}", new Object[]{log.getWlMobileNo(), log.getWlFlex02()});
            }
        } catch (Exception e) {
            logger.error("", e);
        } finally {
        }
        return wlLogId;
    }

    public void resetUnReadMessageFlag(TWhatsappLog log) {
        try {
            QueryRunner run = new QueryRunner();
            int rec_cnt = 0;
            String query = "UPDATE T_WHATSAPP_TXN SET WT_FLEX_01 = '0' WHERE WT_MOBILE_NO = ?";
            Object[] param = new Object[]{log.getWlMobileNo()};
            rec_cnt = run.update(con, query, param);
            logger.info("Reset un read message count. Mobile No: {}, Status: {}", new Object[]{log.getWlLogId(), rec_cnt});
        } catch (Exception e) {
            logger.error("", e);
        }
    }

    public void init() {
        con = getDBConnection(getDataSource());
    }

    public void destroy() {
        DbUtils.closeQuietly(con);
    }

    /*public String fetchWTContactByUserKey(String userId) {
        String wtContactNum = null;
        try {
            con = getDBConnection(getDataSource());
            QueryRunner run = new QueryRunner();
            String query = "SELECT WC_MOBILE_NO FROM M_WHATSAPP_CONTACTS WHERE WC_USER_KEY = ?";
            Object[] param = new Object[]{userId};
            ResultSetHandler<String> sh = new ScalarHandler<>(1);
            String result = run.query(con, query, sh, param); 
            if (result != null) {
                wtContactNum = result;
            } else {
                logger.warn("WTContact not found. Mobile: {}, USER_KEY Id: {}", new Object[]{userId});
            }
        } catch (Exception e) {
            logger.error("", e);
        } finally {
            DbUtils.closeQuietly(con);
        }
        return wtContactNum;
    }

    public String fetchUserKeyByWTContact(String wtContact) {
        String userKey = null;
        try {
            QueryRunner run = new QueryRunner();
            String query = "SELECT WC_USER_KEY FROM M_WHATSAPP_CONTACTS WHERE WC_MOBILE_NO = ? ";
            Object[] param = new Object[]{wtContact};
            ResultSetHandler<String> sh = new ScalarHandler<>(1);
            String result = run.query(con, query, sh, param);
            if (result != null) {
                userKey = result;
            } else {
                logger.warn("UserKey not found. Mobile: {}, WC_MOBILE_NO: {}", new Object[]{wtContact});
            }
        } catch (Exception e) {
            logger.error("", e);
        }
        return userKey;
    }*/

    public Timestamp fetchLastWLDate(String wtContact) {
        Timestamp lastLogDate = null;
        try {
            con = getDBConnection(getDataSource());
            QueryRunner run = new QueryRunner();
            String query = "SELECT MAX(WL_LOG_DATE) WL_LOG_DATE FROM T_WHATSAPP_LOG WHERE WL_MOBILE_NO = ? ";
            Object[] param = new Object[]{wtContact};
            ResultSetHandler<Timestamp> sh = new ScalarHandler<>(1);
            Timestamp result = run.query(con, query, sh, param);
            if (result != null) {
                lastLogDate = result;
            } else {
                logger.warn("Last log date not found. Mobile: {}, WL_MOBILE_NO: {}", new Object[]{wtContact});
            }
        } catch (Exception e) {
            logger.error("", e);
        } finally {
            DbUtils.closeQuietly(con);
        }
        return lastLogDate;
    }

}
