/*
 * Copyright (C) Qatar Insurance Group, PO Box 666, Doha, Qatar
 * All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited.
 */
package org.apache.commons.dbutils;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.apache.commons.dbutils.handlers.AutoGeneratedKeyHandler;

/**
 * Executes SQL queries with pluggable strategies for handling
 * <code>ResultSet</code>s. This class is thread safe.
 *
 * @see ResultSetHandler
 * @author ravindar.singh
 */
public class CustomQueryRunner extends QueryRunner {

    /**
     * Constructor for QueryRunner that controls the use of
     * <code>ParameterMetaData</code>.
     *
     * @param pmdKnownBroken Some drivers don't support {@link java.sql.ParameterMetaData#getParameterType(int)
     * }; if <code>pmdKnownBroken</code> is set to true, we won't even try it;
     * if false, we'll try it, and if it breaks, we'll remember not to use it
     * again.
     */
    public CustomQueryRunner(boolean pmdKnownBroken) {
        super(pmdKnownBroken);
    }

    @Override
    public <T> T insert(Connection conn, String sql, ResultSetHandler<T> rsh, Object... params) throws SQLException {
        boolean closeConn = false;
        if (conn == null) {
            throw new SQLException("Null connection");
        }
        if (sql == null) {
            if (closeConn) {
                close(conn);
            }
            throw new SQLException("Null SQL statement");
        }
        if (rsh == null) {
            if (closeConn) {
                close(conn);
            }
            throw new SQLException("Null ResultSetHandler");
        }
        PreparedStatement stmt = null;
        T generatedKeys = null;
        try {
            if (rsh instanceof AutoGeneratedKeyHandler) {
                AutoGeneratedKeyHandler akh = (AutoGeneratedKeyHandler) rsh;
                if (akh.isHandleByColumnName()) {
                    stmt = conn.prepareStatement(sql, akh.handleByColumnName());
                } else {
                    stmt = conn.prepareStatement(sql, akh.handleByColumnIndex());
                }
            } else {
                stmt = conn.prepareStatement(sql);
            }
            this.fillStatement(stmt, params);
            stmt.executeUpdate();
            ResultSet resultSet = stmt.getGeneratedKeys();
            generatedKeys = rsh.handle(resultSet);
        } catch (SQLException e) {
            this.rethrow(e, sql, params);
        } finally {
            close(stmt);
            if (closeConn) {
                close(conn);
            }
        }
        return generatedKeys;
    }
}
